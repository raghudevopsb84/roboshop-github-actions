name: AKS Deploy
on:
  workflow_call:
    inputs:
      appName:
        required: true
        type: string
      appEnv:
        required: true
        type: string
      resourceGroup:
        required: true
        type: string
    secrets:
      vault_token:
        required: true
jobs:
  Deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Checkout Helm repo
        uses: actions/checkout@v4
        with:
          repository: raghudevopsb84/roboshop-helm
          path: helm
      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: http://vault-int.rdevopsb84.online:8200/
          token: ${{ secrets.vault_token }}
          secrets: |
            roboshop-infra/data/azure-sp ARM_CLIENT_ID | ARM_CLIENT_ID ;
            roboshop-infra/data/azure-sp ARM_CLIENT_SECRET | ARM_CLIENT_SECRET ;
            roboshop-infra/data/azure-sp ARM_TENANT_ID | ARM_TENANT_ID ;
            roboshop-infra/data/azure-sp ARM_SUBSCRIPTION_ID | ARM_SUBSCRIPTION_ID ;
      - name: Deploy
        run: |
          cd helm
          az login --service-principal --username "${ARM_CLIENT_ID}" --password "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}"
          az aks get-credentials --name main-${{ inputs.appEnv }} --resource-group ${{ inputs.resourceGroup }} --overwrite-existing
          argocd login $(kubectl get svc argo-cd-argocd-server -n argocd -o=jsonpath='{.status.loadBalancer.ingress[].ip}') --insecure --username admin --password $(kubectl get secrets argocd-initial-admin-secret -n argocd  -o=jsonpath='{.data.password}' |base64 --decode)
          kubectl create ns app || true
          argocd app create ${{ inputs.appName }} --repo https://github.com/raghudevopsb84/roboshop-helm.git --path . --dest-namespace app --dest-server https://kubernetes.default.svc --values env-dev/${{ inputs.appName }}.yaml --helm-set appTag=${{ github.sha }} --upsert
          argocd app sync ${{ inputs.appName }}

